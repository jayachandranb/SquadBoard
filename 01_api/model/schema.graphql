# Types and Enums Start

type Squad {
    squadID: ID!
    name: String!
    mission: String
    focus: Focus @relation(name:"FOCUSSED_ON", direction:OUT)
    tpl: SquadTPL
    po: SquadPO
    health: Float
    members: [SquadMembers]
    badges: [Badge] @relation(name:"ACHIEVED", direction:OUT)
    tags: [Tag] @relation(name:"TAGGED_AS", direction:OUT)
    locations: [Location] @cypher(statement:"MATCH (this)<-[:MEMBER_OF]-(:Person)-[:BASED_IN]->(l:Location) RETURN DISTINCT l")
    epics: [Epic] @relation(name:"ASSIGNED_TO", direction:IN)
    graphs: [SquadGraph]
}

type Focus {
    focusID:ID!
    area: String!
    description: String
    squads:[Squad] @relation(name:"FOCUSSED_ON", direction:IN)
}

type Person {
    personID: ID!
    lanID: String!
    firstName: String
    middleName: String
    lastName: String!
    email: String!
    phone: String
    location: Location @relation(name:"BASED_IN", direction:OUT)
    chapter: Chapter @relation(name:"PART_OF", direction:OUT)
    isChapterLead: Boolean
    skills:[Skill] @relation(name:"SKILLED_AT", direction:OUT)
    tplOf:[SquadTPL]
    memberOf: [SquadMembers]
    productOwnerOf: [SquadPO]
    totalAllocation: Float @cypher(statement:"MATCH (this)-[m:MEMBER_OF]->(:Squad) RETURN SUM(m.allocation)")
    badges:[Badge] @relation(name:"ACHIEVED", direction:OUT)
    organisation: Organisation @relation(name:"EMPLOYEE_OF", direction:OUT)
    stories: [Story] @relation(name:"ASSIGNED_PERSON", direction:IN)
    # commits: [Commit] @relation(name:"PERFORMED", direction:OUT)
}

type Chapter {
    chapterID: ID!
    shortName: String!
    name: String!
    members: [Person] @relation(name:"PART_OF", direction:IN)
}

type Skill {
    skillID: ID!
    expertise: String!
    description: String
    people: [Person] @relation(name:"SKILLED_AT", direction:IN)
}

type Badge {
    badgeID: ID!
    name: String!
    version: String
    description: String
    squads: [Squad] @relation(name:"ACHIEVED", direction:IN)
    people: [Person] @relation(name:"ACHIEVED", direction:IN)
}

type Tag {
    tagID: ID!
    label: String!
    squads: [Squad] @relation(name:"TAGGED_AS", direction:IN)
}

type Location {
    locationID: ID!
    city: String!
    country: String!
    people: [Person] @relation(name:"BASED_IN", direction:IN)
    squads: [Squad] @cypher(statement:"MATCH (s:Squad)<-[:MEMBER_OF]-(:Person)-[:BASED_IN]->(this) RETURN DISTINCT s")
}

type Organisation {
    organisationID: ID!
    shortName: String!
    name: String!
    employees: [Person] @relation(name:"EMPLOYEE_OF", direction:IN)
}

# Jira

type ProgramIncrement {
    piID: ID!
    piNumber: Int!
    isCurrent: Boolean!
    startDate: Date!
    endDate: Date
    sprints: [Sprint] @relation(name:"TOWARDS", direction:IN)
    scheduledEpics: [Epic] @relation(name:"SCHEDULED_FOR", direction:IN)
    executedEpics: [Epic] @relation(name:"EXECUTED_IN", direction:IN)

}

type Sprint {
    sprintID: ID!
    sprintNumber: Int!
    isCurrent: Boolean!
    startDate: Date!
    endDate: Date
    programIncrement: ProgramIncrement! @relation(name:"TOWARDS", direction:OUT)
    scheduledStories: [Story] @relation(name:"SCHEDULED_FOR", direction:IN)
    executedStories: [Story] @relation(name:"EXECUTED_IN", direction:IN)
}

type Feature {
    featureID: ID!
    jiraID: String!
    status: Status!
    epics: [Epic] @relation(name:"FULFILLS", direction:IN)
}

type Epic {
    epicID: ID!
    jiraID: String!
    status: Status!
    scheduledPI: ProgramIncrement @relation(name:"SCHEDULED_FOR", direction:OUT)
    executedPI: ProgramIncrement @relation(name:"EXECUTED_IN", direction:OUT)
    feature: Feature @relation(name:"FULFILLS", direction:OUT)
    stories: [Story] @relation(name:"FULFILLS", direction:IN)
    dependedOn: [Epic] @relation(name:"DEPENDED_ON", direction:OUT)
    dependedBy: [Epic] @relation(name:"DEPENDED_ON", direction:IN)
    squad: Squad @relation(name:"ASSIGNED_TO", direction: OUT)
}

type Story {
    storyID: ID!
    jiraID: String!
    status: Status!
    storyType: StoryType!
    scheduledSprint: Sprint @relation(name:"SCHEDULED_FOR", direction:OUT)
    executedSprint: Sprint @relation(name:"EXECUTED_IN", direction:OUT)
    epic: Epic @relation(name:"FULFILLS", direction:OUT)
    assignee: Person @relation(name:"ASSIGNED_PERSON", direction:OUT)
    links: [StoryLink]
}

enum StoryType {
    STORY
    BUG
    TEST
    TASK
    SUBTASK
    UNKNOWN
}

enum Status {
    FUNNEL
    WITHTEAM
    BACKLOG
    TODO
    INPROGRESS
    INREVIEW
    INTESTING
    COMPLETED
    UNKNOWN
}

# git

# type Repository {
#     repoID: ID!
#     repoTool: RepoTool!
#     sdcpID: String!
#     repoURL: String!
#     branches: [Branch] @relation(name:"BRANCH_OF", direction:IN)
# }

# enum RepoTool {
#     GITHUB
#     BITBUCKET
# }

# type Branch {
#     branchID: ID!
#     sdcpBranchID: String!
#     branchType: BranchType!
#     repository: Repository! @relation(name:"BRANCH_OF", direction:OUT)
#     commits: [Commit] @relation(name:"COMMIT_TO", direction:IN)
# }

# enum BranchType {
#     MASTER
#     DEVELOP
#     RELEASE
#     FEATURE
#     HOTFIX
#     BUGFIX
#     OTHER
# }

# type Commit {
#     commitID: ID!
#     sdcpCommitID: String!
#     commitTime: DateTime!
#     author: Person! @relation(name:"PERFORMED", direction:IN)
#     branch: Branch! @relation(name:"COMMIT_TO", direction:OUT)
# }

# type PullRequest {
#     prID: ID!
#     scdpPRID: String!
#     author: Person @relation(name:"REQUESTED", direction:IN)
#     fromBranch: Branch @relation(name:"CHANGES_FROM", direction: OUT)
#     toBranch: Branch @relation(name:"MERGE_TO", direction:OUT)
#     repo: Repository @cypher(statement:"MATCH (r:Repository)<-[:BRANCH_OF]-(:Branch)<-[:CHANGES_FROM]-(this) RETURN DISTINCT r")
# }

# Graph
type Graph {
    graphID: ID!
    name: String! 
    version: String
    description: String
    squads: [SquadGraph]
}

# Types and Enums End

# Relationships Start

type SquadTPL @relation(name:"TPL_OF") {
    from: Person
    to: Squad
    active: Boolean
    startDate: Date
    endDate: Date
}

type SquadPO @relation(name:"PO_OF") {
    from: Person
    to: Squad
    active: Boolean
    startDate: Date
    endDate: Date
}

type SquadMembers @relation(name:"MEMBER_OF") {
    from: Person
    to: Squad
    roles: [String]
    allocation: Float!
    active: Boolean
    startDate: Date
    endDate: Date
}

type StoryLink @relation(name:"LINKED_TO") {
    from: Story
    to: Story
    type: String
}

type SquadGraph @relation(name:"ANALYSED_ON") {
    # Example: 
    #     values: [1,2,3,4,5,6,7,8]
    #     valuesMask: [1,1,1,0,0,1,0,1]
    #     coordinates: ['sprint1', 'sprint2', 'code_impact', 'code_contrib', 'bowen', 'sherry']
    #     valuesShape: [2,2,2] 
    #     
    # Get actual values: 
    #     1. apply mask: [1,2,3,4,5,6,7,8] -> [1,2,3,null,null,6,null,8]
    #     2. apply shape: [[1,2],[3,null]],[[null,6],[null,8]]]
    #     3. coordinates map: [['sprint_1', 'sprint_2'], ['code_impact', 'code_contrib'], ['bowen', 'sherry']] 
    #     explaination: [[1,2],[3,null]] is 'sprint1' result, [1,2] is 'code_impact' value metrics, 1 is 'code impact' value for 'bowen'
    from: Squad 
    to: Graph
    upToDate: Boolean
    analyseDate: Date
    # Add piNumber just for easy of use, otherwise can retrieve PI info by analyseDate
    piNumber: Int
    # Start graph data
    values: [Float]
    valuesMask: [Boolean]
    coordinates: [String]
    valuesShape: [Int]
    additionalInfo: [String]
}

# Relationships End