directive @cypher(statement: String) on FIELD_DEFINITION
directive @relation(
  name: String
  direction: _RelationDirections
  from: String
  to: String
) on FIELD_DEFINITION | OBJECT
directive @MutationMeta(
  relationship: String
  from: String
  to: String
) on FIELD_DEFINITION
directive @neo4j_ignore on FIELD_DEFINITION
type _AddBadgePeoplePayload {
  from: Person
  to: Badge
}

type _AddBadgeSquadsPayload {
  from: Squad
  to: Badge
}

type _AddChapterMembersPayload {
  from: Person
  to: Chapter
}

type _AddFocusSquadsPayload {
  from: Squad
  to: Focus
}

type _AddPersonBadgesPayload {
  from: Person
  to: Badge
}

type _AddPersonChapterPayload {
  from: Person
  to: Chapter
}

type _AddPersonMemberOfPayload {
  from: Person
  to: Squad
  roles: [String]
  allocation: Float
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
}

type _AddPersonProductOwnerOfPayload {
  from: Person
  to: Squad
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
}

type _AddPersonSkillsPayload {
  from: Person
  to: Skill
}

type _AddSkillPeoplePayload {
  from: Person
  to: Skill
}

type _AddSquadBadgesPayload {
  from: Squad
  to: Badge
}

type _AddSquadFocusPayload {
  from: Squad
  to: Focus
}

type _AddSquadMembersPayload {
  from: Person
  to: Squad
  roles: [String]
  allocation: Float
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
}

type _AddSquadPoPayload {
  from: Person
  to: Squad
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
}

type _AddSquadTagsPayload {
  from: Squad
  to: Tag
}

type _AddSquadTplPayload {
  from: Person
  to: Squad
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
}

type _AddTagSquadsPayload {
  from: Squad
  to: Tag
}

input _BadgeFilter {
  AND: [_BadgeFilter!]
  OR: [_BadgeFilter!]
  badgeID: ID
  badgeID_not: ID
  badgeID_in: [ID!]
  badgeID_not_in: [ID!]
  badgeID_contains: ID
  badgeID_not_contains: ID
  badgeID_starts_with: ID
  badgeID_not_starts_with: ID
  badgeID_ends_with: ID
  badgeID_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  version: String
  version_not: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_not_contains: String
  version_starts_with: String
  version_not_starts_with: String
  version_ends_with: String
  version_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  squads: _SquadFilter
  squads_not: _SquadFilter
  squads_in: [_SquadFilter!]
  squads_not_in: [_SquadFilter!]
  squads_some: _SquadFilter
  squads_none: _SquadFilter
  squads_single: _SquadFilter
  squads_every: _SquadFilter
  people: _PersonFilter
  people_not: _PersonFilter
  people_in: [_PersonFilter!]
  people_not_in: [_PersonFilter!]
  people_some: _PersonFilter
  people_none: _PersonFilter
  people_single: _PersonFilter
  people_every: _PersonFilter
}

input _BadgeInput {
  badgeID: ID!
}

enum _BadgeOrdering {
  badgeID_asc
  badgeID_desc
  name_asc
  name_desc
  version_asc
  version_desc
  description_asc
  description_desc
  _id_asc
  _id_desc
}

input _ChapterFilter {
  AND: [_ChapterFilter!]
  OR: [_ChapterFilter!]
  chapterID: ID
  chapterID_not: ID
  chapterID_in: [ID!]
  chapterID_not_in: [ID!]
  chapterID_contains: ID
  chapterID_not_contains: ID
  chapterID_starts_with: ID
  chapterID_not_starts_with: ID
  chapterID_ends_with: ID
  chapterID_not_ends_with: ID
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members: _PersonFilter
  members_not: _PersonFilter
  members_in: [_PersonFilter!]
  members_not_in: [_PersonFilter!]
  members_some: _PersonFilter
  members_none: _PersonFilter
  members_single: _PersonFilter
  members_every: _PersonFilter
}

input _ChapterInput {
  chapterID: ID!
}

enum _ChapterOrdering {
  chapterID_asc
  chapterID_desc
  shortName_asc
  shortName_desc
  name_asc
  name_desc
  _id_asc
  _id_desc
}

input _FocusFilter {
  AND: [_FocusFilter!]
  OR: [_FocusFilter!]
  focusID: ID
  focusID_not: ID
  focusID_in: [ID!]
  focusID_not_in: [ID!]
  focusID_contains: ID
  focusID_not_contains: ID
  focusID_starts_with: ID
  focusID_not_starts_with: ID
  focusID_ends_with: ID
  focusID_not_ends_with: ID
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  squads: _SquadFilter
  squads_not: _SquadFilter
  squads_in: [_SquadFilter!]
  squads_not_in: [_SquadFilter!]
  squads_some: _SquadFilter
  squads_none: _SquadFilter
  squads_single: _SquadFilter
  squads_every: _SquadFilter
}

input _FocusInput {
  focusID: ID!
}

enum _FocusOrdering {
  focusID_asc
  focusID_desc
  area_asc
  area_desc
  description_asc
  description_desc
  _id_asc
  _id_desc
}

type _Neo4jDate {
  year: Int
  month: Int
  day: Int
  formatted: String
}

input _Neo4jDateInput {
  year: Int
  month: Int
  day: Int
  formatted: String
}

type _Neo4jDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

type _Neo4jLocalDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

input _Neo4jLocalDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

type _Neo4jLocalTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

input _Neo4jLocalTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  formatted: String
}

type _Neo4jTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jTimeInput {
  hour: Int
  minute: Int
  second: Int
  nanosecond: Int
  millisecond: Int
  microsecond: Int
  timezone: String
  formatted: String
}

input _PersonFilter {
  AND: [_PersonFilter!]
  OR: [_PersonFilter!]
  personID: ID
  personID_not: ID
  personID_in: [ID!]
  personID_not_in: [ID!]
  personID_contains: ID
  personID_not_contains: ID
  personID_starts_with: ID
  personID_not_starts_with: ID
  personID_ends_with: ID
  personID_not_ends_with: ID
  lanID: String
  lanID_not: String
  lanID_in: [String!]
  lanID_not_in: [String!]
  lanID_contains: String
  lanID_not_contains: String
  lanID_starts_with: String
  lanID_not_starts_with: String
  lanID_ends_with: String
  lanID_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  chapter: _ChapterFilter
  chapter_not: _ChapterFilter
  chapter_in: [_ChapterFilter!]
  chapter_not_in: [_ChapterFilter!]
  isChapterLead: Boolean
  isChapterLead_not: Boolean
  skills: _SkillFilter
  skills_not: _SkillFilter
  skills_in: [_SkillFilter!]
  skills_not_in: [_SkillFilter!]
  skills_some: _SkillFilter
  skills_none: _SkillFilter
  skills_single: _SkillFilter
  skills_every: _SkillFilter
  productOwnerOf: _PersonSquadPOFilter
  productOwnerOf_not: _PersonSquadPOFilter
  productOwnerOf_in: [_PersonSquadPOFilter!]
  productOwnerOf_not_in: [_PersonSquadPOFilter!]
  productOwnerOf_some: _PersonSquadPOFilter
  productOwnerOf_none: _PersonSquadPOFilter
  productOwnerOf_single: _PersonSquadPOFilter
  productOwnerOf_every: _PersonSquadPOFilter
  memberOf: _PersonSquadMembersFilter
  memberOf_not: _PersonSquadMembersFilter
  memberOf_in: [_PersonSquadMembersFilter!]
  memberOf_not_in: [_PersonSquadMembersFilter!]
  memberOf_some: _PersonSquadMembersFilter
  memberOf_none: _PersonSquadMembersFilter
  memberOf_single: _PersonSquadMembersFilter
  memberOf_every: _PersonSquadMembersFilter
  badges: _BadgeFilter
  badges_not: _BadgeFilter
  badges_in: [_BadgeFilter!]
  badges_not_in: [_BadgeFilter!]
  badges_some: _BadgeFilter
  badges_none: _BadgeFilter
  badges_single: _BadgeFilter
  badges_every: _BadgeFilter
}

input _PersonInput {
  personID: ID!
}

type _PersonMemberOf {
  roles: [String]
  allocation: Float!
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
  Squad: Squad
}

enum _PersonOrdering {
  personID_asc
  personID_desc
  lanID_asc
  lanID_desc
  firstName_asc
  firstName_desc
  middleName_asc
  middleName_desc
  lastName_asc
  lastName_desc
  email_asc
  email_desc
  phone_asc
  phone_desc
  isChapterLead_asc
  isChapterLead_desc
  _id_asc
  _id_desc
}

type _PersonProductOwnerOf {
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
  Squad: Squad
}

input _PersonSquadMembersFilter {
  AND: [_PersonSquadMembersFilter!]
  OR: [_PersonSquadMembersFilter!]
  allocation: Float
  allocation_not: Float
  allocation_in: [Float!]
  allocation_not_in: [Float!]
  allocation_lt: Float
  allocation_lte: Float
  allocation_gt: Float
  allocation_gte: Float
  active: Boolean
  active_not: Boolean
  startDate: _Neo4jDateTimeInput
  startDate_not: _Neo4jDateTimeInput
  startDate_in: [_Neo4jDateTimeInput!]
  startDate_not_in: [_Neo4jDateTimeInput!]
  startDate_lt: _Neo4jDateTimeInput
  startDate_lte: _Neo4jDateTimeInput
  startDate_gt: _Neo4jDateTimeInput
  startDate_gte: _Neo4jDateTimeInput
  endDate: _Neo4jDateTimeInput
  endDate_not: _Neo4jDateTimeInput
  endDate_in: [_Neo4jDateTimeInput!]
  endDate_not_in: [_Neo4jDateTimeInput!]
  endDate_lt: _Neo4jDateTimeInput
  endDate_lte: _Neo4jDateTimeInput
  endDate_gt: _Neo4jDateTimeInput
  endDate_gte: _Neo4jDateTimeInput
  Squad: _SquadFilter
}

input _PersonSquadPOFilter {
  AND: [_PersonSquadPOFilter!]
  OR: [_PersonSquadPOFilter!]
  active: Boolean
  active_not: Boolean
  startDate: _Neo4jDateTimeInput
  startDate_not: _Neo4jDateTimeInput
  startDate_in: [_Neo4jDateTimeInput!]
  startDate_not_in: [_Neo4jDateTimeInput!]
  startDate_lt: _Neo4jDateTimeInput
  startDate_lte: _Neo4jDateTimeInput
  startDate_gt: _Neo4jDateTimeInput
  startDate_gte: _Neo4jDateTimeInput
  endDate: _Neo4jDateTimeInput
  endDate_not: _Neo4jDateTimeInput
  endDate_in: [_Neo4jDateTimeInput!]
  endDate_not_in: [_Neo4jDateTimeInput!]
  endDate_lt: _Neo4jDateTimeInput
  endDate_lte: _Neo4jDateTimeInput
  endDate_gt: _Neo4jDateTimeInput
  endDate_gte: _Neo4jDateTimeInput
  Squad: _SquadFilter
}

enum _RelationDirections {
  IN
  OUT
}

type _RemoveBadgePeoplePayload {
  from: Person
  to: Badge
}

type _RemoveBadgeSquadsPayload {
  from: Squad
  to: Badge
}

type _RemoveChapterMembersPayload {
  from: Person
  to: Chapter
}

type _RemoveFocusSquadsPayload {
  from: Squad
  to: Focus
}

type _RemovePersonBadgesPayload {
  from: Person
  to: Badge
}

type _RemovePersonChapterPayload {
  from: Person
  to: Chapter
}

type _RemovePersonMemberOfPayload {
  from: Person
  to: Squad
}

type _RemovePersonProductOwnerOfPayload {
  from: Person
  to: Squad
}

type _RemovePersonSkillsPayload {
  from: Person
  to: Skill
}

type _RemoveSkillPeoplePayload {
  from: Person
  to: Skill
}

type _RemoveSquadBadgesPayload {
  from: Squad
  to: Badge
}

type _RemoveSquadFocusPayload {
  from: Squad
  to: Focus
}

type _RemoveSquadMembersPayload {
  from: Person
  to: Squad
}

type _RemoveSquadPoPayload {
  from: Person
  to: Squad
}

type _RemoveSquadTagsPayload {
  from: Squad
  to: Tag
}

type _RemoveSquadTplPayload {
  from: Person
  to: Squad
}

type _RemoveTagSquadsPayload {
  from: Squad
  to: Tag
}

input _SkillFilter {
  AND: [_SkillFilter!]
  OR: [_SkillFilter!]
  skillID: ID
  skillID_not: ID
  skillID_in: [ID!]
  skillID_not_in: [ID!]
  skillID_contains: ID
  skillID_not_contains: ID
  skillID_starts_with: ID
  skillID_not_starts_with: ID
  skillID_ends_with: ID
  skillID_not_ends_with: ID
  expertise: String
  expertise_not: String
  expertise_in: [String!]
  expertise_not_in: [String!]
  expertise_contains: String
  expertise_not_contains: String
  expertise_starts_with: String
  expertise_not_starts_with: String
  expertise_ends_with: String
  expertise_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  people: _PersonFilter
  people_not: _PersonFilter
  people_in: [_PersonFilter!]
  people_not_in: [_PersonFilter!]
  people_some: _PersonFilter
  people_none: _PersonFilter
  people_single: _PersonFilter
  people_every: _PersonFilter
}

input _SkillInput {
  skillID: ID!
}

enum _SkillOrdering {
  skillID_asc
  skillID_desc
  expertise_asc
  expertise_desc
  description_asc
  description_desc
  _id_asc
  _id_desc
}

input _SquadFilter {
  AND: [_SquadFilter!]
  OR: [_SquadFilter!]
  squadID: ID
  squadID_not: ID
  squadID_in: [ID!]
  squadID_not_in: [ID!]
  squadID_contains: ID
  squadID_not_contains: ID
  squadID_starts_with: ID
  squadID_not_starts_with: ID
  squadID_ends_with: ID
  squadID_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  mission: String
  mission_not: String
  mission_in: [String!]
  mission_not_in: [String!]
  mission_contains: String
  mission_not_contains: String
  mission_starts_with: String
  mission_not_starts_with: String
  mission_ends_with: String
  mission_not_ends_with: String
  focus: _FocusFilter
  focus_not: _FocusFilter
  focus_in: [_FocusFilter!]
  focus_not_in: [_FocusFilter!]
  tpl: _SquadSquadTPLFilter
  tpl_not: _SquadSquadTPLFilter
  tpl_in: [_SquadSquadTPLFilter!]
  tpl_not_in: [_SquadSquadTPLFilter!]
  po: _SquadSquadPOFilter
  po_not: _SquadSquadPOFilter
  po_in: [_SquadSquadPOFilter!]
  po_not_in: [_SquadSquadPOFilter!]
  members: _SquadSquadMembersFilter
  members_not: _SquadSquadMembersFilter
  members_in: [_SquadSquadMembersFilter!]
  members_not_in: [_SquadSquadMembersFilter!]
  members_some: _SquadSquadMembersFilter
  members_none: _SquadSquadMembersFilter
  members_single: _SquadSquadMembersFilter
  members_every: _SquadSquadMembersFilter
  badges: _BadgeFilter
  badges_not: _BadgeFilter
  badges_in: [_BadgeFilter!]
  badges_not_in: [_BadgeFilter!]
  badges_some: _BadgeFilter
  badges_none: _BadgeFilter
  badges_single: _BadgeFilter
  badges_every: _BadgeFilter
  tags: _TagFilter
  tags_not: _TagFilter
  tags_in: [_TagFilter!]
  tags_not_in: [_TagFilter!]
  tags_some: _TagFilter
  tags_none: _TagFilter
  tags_single: _TagFilter
  tags_every: _TagFilter
}

input _SquadInput {
  squadID: ID!
}

type _SquadMembers {
  roles: [String]
  allocation: Float!
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
  Person: Person
}

input _SquadMembersInput {
  roles: [String]
  allocation: Float!
  active: Boolean
  startDate: _Neo4jDateTimeInput
  endDate: _Neo4jDateTimeInput
}

enum _SquadOrdering {
  squadID_asc
  squadID_desc
  name_asc
  name_desc
  mission_asc
  mission_desc
  _id_asc
  _id_desc
}

type _SquadPo {
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
  Person: Person
}

input _SquadPOInput {
  active: Boolean
  startDate: _Neo4jDateTimeInput
  endDate: _Neo4jDateTimeInput
}

input _SquadSquadMembersFilter {
  AND: [_SquadSquadMembersFilter!]
  OR: [_SquadSquadMembersFilter!]
  allocation: Float
  allocation_not: Float
  allocation_in: [Float!]
  allocation_not_in: [Float!]
  allocation_lt: Float
  allocation_lte: Float
  allocation_gt: Float
  allocation_gte: Float
  active: Boolean
  active_not: Boolean
  startDate: _Neo4jDateTimeInput
  startDate_not: _Neo4jDateTimeInput
  startDate_in: [_Neo4jDateTimeInput!]
  startDate_not_in: [_Neo4jDateTimeInput!]
  startDate_lt: _Neo4jDateTimeInput
  startDate_lte: _Neo4jDateTimeInput
  startDate_gt: _Neo4jDateTimeInput
  startDate_gte: _Neo4jDateTimeInput
  endDate: _Neo4jDateTimeInput
  endDate_not: _Neo4jDateTimeInput
  endDate_in: [_Neo4jDateTimeInput!]
  endDate_not_in: [_Neo4jDateTimeInput!]
  endDate_lt: _Neo4jDateTimeInput
  endDate_lte: _Neo4jDateTimeInput
  endDate_gt: _Neo4jDateTimeInput
  endDate_gte: _Neo4jDateTimeInput
  Person: _PersonFilter
}

input _SquadSquadPOFilter {
  AND: [_SquadSquadPOFilter!]
  OR: [_SquadSquadPOFilter!]
  active: Boolean
  active_not: Boolean
  startDate: _Neo4jDateTimeInput
  startDate_not: _Neo4jDateTimeInput
  startDate_in: [_Neo4jDateTimeInput!]
  startDate_not_in: [_Neo4jDateTimeInput!]
  startDate_lt: _Neo4jDateTimeInput
  startDate_lte: _Neo4jDateTimeInput
  startDate_gt: _Neo4jDateTimeInput
  startDate_gte: _Neo4jDateTimeInput
  endDate: _Neo4jDateTimeInput
  endDate_not: _Neo4jDateTimeInput
  endDate_in: [_Neo4jDateTimeInput!]
  endDate_not_in: [_Neo4jDateTimeInput!]
  endDate_lt: _Neo4jDateTimeInput
  endDate_lte: _Neo4jDateTimeInput
  endDate_gt: _Neo4jDateTimeInput
  endDate_gte: _Neo4jDateTimeInput
  Person: _PersonFilter
}

input _SquadSquadTPLFilter {
  AND: [_SquadSquadTPLFilter!]
  OR: [_SquadSquadTPLFilter!]
  active: Boolean
  active_not: Boolean
  startDate: _Neo4jDateTimeInput
  startDate_not: _Neo4jDateTimeInput
  startDate_in: [_Neo4jDateTimeInput!]
  startDate_not_in: [_Neo4jDateTimeInput!]
  startDate_lt: _Neo4jDateTimeInput
  startDate_lte: _Neo4jDateTimeInput
  startDate_gt: _Neo4jDateTimeInput
  startDate_gte: _Neo4jDateTimeInput
  endDate: _Neo4jDateTimeInput
  endDate_not: _Neo4jDateTimeInput
  endDate_in: [_Neo4jDateTimeInput!]
  endDate_not_in: [_Neo4jDateTimeInput!]
  endDate_lt: _Neo4jDateTimeInput
  endDate_lte: _Neo4jDateTimeInput
  endDate_gt: _Neo4jDateTimeInput
  endDate_gte: _Neo4jDateTimeInput
  Person: _PersonFilter
}

type _SquadTpl {
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
  Person: Person
}

input _SquadTPLInput {
  active: Boolean
  startDate: _Neo4jDateTimeInput
  endDate: _Neo4jDateTimeInput
}

input _TagFilter {
  AND: [_TagFilter!]
  OR: [_TagFilter!]
  tagID: ID
  tagID_not: ID
  tagID_in: [ID!]
  tagID_not_in: [ID!]
  tagID_contains: ID
  tagID_not_contains: ID
  tagID_starts_with: ID
  tagID_not_starts_with: ID
  tagID_ends_with: ID
  tagID_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  squads: _SquadFilter
  squads_not: _SquadFilter
  squads_in: [_SquadFilter!]
  squads_not_in: [_SquadFilter!]
  squads_some: _SquadFilter
  squads_none: _SquadFilter
  squads_single: _SquadFilter
  squads_every: _SquadFilter
}

input _TagInput {
  tagID: ID!
}

enum _TagOrdering {
  tagID_asc
  tagID_desc
  label_asc
  label_desc
  _id_asc
  _id_desc
}

type Badge {
  badgeID: ID!
  name: String!
  version: String
  description: String
  squads(
    first: Int
    offset: Int
    orderBy: [_SquadOrdering]
    filter: _SquadFilter
  ): [Squad]
  people(
    first: Int
    offset: Int
    orderBy: [_PersonOrdering]
    filter: _PersonFilter
  ): [Person]
  _id: String
}

type Chapter {
  chapterID: ID!
  shortName: String!
  name: String!
  members(
    first: Int
    offset: Int
    orderBy: [_PersonOrdering]
    filter: _PersonFilter
  ): [Person]
  _id: String
}

type Focus {
  focusID: ID!
  area: String!
  description: String
  squads(
    first: Int
    offset: Int
    orderBy: [_SquadOrdering]
    filter: _SquadFilter
  ): [Squad]
  _id: String
}

type Mutation {
  CreateSquad(squadID: ID, name: String!, mission: String): Squad
  UpdateSquad(squadID: ID!, name: String, mission: String): Squad
  DeleteSquad(squadID: ID!): Squad
  AddSquadFocus(from: _SquadInput!, to: _FocusInput!): _AddSquadFocusPayload
  RemoveSquadFocus(
    from: _SquadInput!
    to: _FocusInput!
  ): _RemoveSquadFocusPayload
  AddSquadTpl(
    from: _PersonInput!
    to: _SquadInput!
    data: _SquadTPLInput!
  ): _AddSquadTplPayload
  RemoveSquadTpl(from: _PersonInput!, to: _SquadInput!): _RemoveSquadTplPayload
  AddSquadPo(
    from: _PersonInput!
    to: _SquadInput!
    data: _SquadPOInput!
  ): _AddSquadPoPayload
  RemoveSquadPo(from: _PersonInput!, to: _SquadInput!): _RemoveSquadPoPayload
  AddSquadMembers(
    from: _PersonInput!
    to: _SquadInput!
    data: _SquadMembersInput!
  ): _AddSquadMembersPayload
  RemoveSquadMembers(
    from: _PersonInput!
    to: _SquadInput!
  ): _RemoveSquadMembersPayload
  AddSquadBadges(from: _SquadInput!, to: _BadgeInput!): _AddSquadBadgesPayload
  RemoveSquadBadges(
    from: _SquadInput!
    to: _BadgeInput!
  ): _RemoveSquadBadgesPayload
  AddSquadTags(from: _SquadInput!, to: _TagInput!): _AddSquadTagsPayload
  RemoveSquadTags(from: _SquadInput!, to: _TagInput!): _RemoveSquadTagsPayload
  CreateFocus(focusID: ID, area: String!, description: String): Focus
  UpdateFocus(focusID: ID!, area: String, description: String): Focus
  DeleteFocus(focusID: ID!): Focus
  AddFocusSquads(from: _SquadInput!, to: _FocusInput!): _AddFocusSquadsPayload
  RemoveFocusSquads(
    from: _SquadInput!
    to: _FocusInput!
  ): _RemoveFocusSquadsPayload
  CreatePerson(
    personID: ID
    lanID: String!
    firstName: String
    middleName: String
    lastName: String!
    email: String!
    phone: String
    isChapterLead: Boolean
  ): Person
  UpdatePerson(
    personID: ID!
    lanID: String
    firstName: String
    middleName: String
    lastName: String
    email: String
    phone: String
    isChapterLead: Boolean
  ): Person
  DeletePerson(personID: ID!): Person
  AddPersonChapter(
    from: _PersonInput!
    to: _ChapterInput!
  ): _AddPersonChapterPayload
  RemovePersonChapter(
    from: _PersonInput!
    to: _ChapterInput!
  ): _RemovePersonChapterPayload
  AddPersonSkills(
    from: _PersonInput!
    to: _SkillInput!
  ): _AddPersonSkillsPayload
  RemovePersonSkills(
    from: _PersonInput!
    to: _SkillInput!
  ): _RemovePersonSkillsPayload
  AddPersonProductOwnerOf(
    from: _PersonInput!
    to: _SquadInput!
    data: _SquadPOInput!
  ): _AddPersonProductOwnerOfPayload
  RemovePersonProductOwnerOf(
    from: _PersonInput!
    to: _SquadInput!
  ): _RemovePersonProductOwnerOfPayload
  AddPersonMemberOf(
    from: _PersonInput!
    to: _SquadInput!
    data: _SquadMembersInput!
  ): _AddPersonMemberOfPayload
  RemovePersonMemberOf(
    from: _PersonInput!
    to: _SquadInput!
  ): _RemovePersonMemberOfPayload
  AddPersonBadges(
    from: _PersonInput!
    to: _BadgeInput!
  ): _AddPersonBadgesPayload
  RemovePersonBadges(
    from: _PersonInput!
    to: _BadgeInput!
  ): _RemovePersonBadgesPayload
  CreateChapter(chapterID: ID, shortName: String!, name: String!): Chapter
  UpdateChapter(chapterID: ID!, shortName: String, name: String): Chapter
  DeleteChapter(chapterID: ID!): Chapter
  AddChapterMembers(
    from: _PersonInput!
    to: _ChapterInput!
  ): _AddChapterMembersPayload
  RemoveChapterMembers(
    from: _PersonInput!
    to: _ChapterInput!
  ): _RemoveChapterMembersPayload
  CreateSkill(skillID: ID, expertise: String!, description: String): Skill
  UpdateSkill(skillID: ID!, expertise: String, description: String): Skill
  DeleteSkill(skillID: ID!): Skill
  AddSkillPeople(from: _PersonInput!, to: _SkillInput!): _AddSkillPeoplePayload
  RemoveSkillPeople(
    from: _PersonInput!
    to: _SkillInput!
  ): _RemoveSkillPeoplePayload
  CreateBadge(
    badgeID: ID
    name: String!
    version: String
    description: String
  ): Badge
  UpdateBadge(
    badgeID: ID!
    name: String
    version: String
    description: String
  ): Badge
  DeleteBadge(badgeID: ID!): Badge
  AddBadgeSquads(from: _SquadInput!, to: _BadgeInput!): _AddBadgeSquadsPayload
  RemoveBadgeSquads(
    from: _SquadInput!
    to: _BadgeInput!
  ): _RemoveBadgeSquadsPayload
  AddBadgePeople(from: _PersonInput!, to: _BadgeInput!): _AddBadgePeoplePayload
  RemoveBadgePeople(
    from: _PersonInput!
    to: _BadgeInput!
  ): _RemoveBadgePeoplePayload
  CreateTag(tagID: ID, label: String!): Tag
  UpdateTag(tagID: ID!, label: String): Tag
  DeleteTag(tagID: ID!): Tag
  AddTagSquads(from: _SquadInput!, to: _TagInput!): _AddTagSquadsPayload
  RemoveTagSquads(from: _SquadInput!, to: _TagInput!): _RemoveTagSquadsPayload
}

type Person {
  personID: ID!
  lanID: String!
  firstName: String
  middleName: String
  lastName: String!
  email: String!
  phone: String
  chapter(filter: _ChapterFilter): Chapter
  isChapterLead: Boolean
  skills(
    first: Int
    offset: Int
    orderBy: [_SkillOrdering]
    filter: _SkillFilter
  ): [Skill]
  tplOf: [Squad]
  productOwnerOf(filter: _PersonSquadPOFilter): [_PersonProductOwnerOf]
  memberOf(filter: _PersonSquadMembersFilter): [_PersonMemberOf]
  badges(
    first: Int
    offset: Int
    orderBy: [_BadgeOrdering]
    filter: _BadgeFilter
  ): [Badge]
  _id: String
}

type Query {
  Squad(
    squadID: ID
    name: String
    mission: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_SquadOrdering]
    filter: _SquadFilter
  ): [Squad]
  Focus(
    focusID: ID
    area: String
    description: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_FocusOrdering]
    filter: _FocusFilter
  ): [Focus]
  Person(
    personID: ID
    lanID: String
    firstName: String
    middleName: String
    lastName: String
    email: String
    phone: String
    isChapterLead: Boolean
    _id: String
    first: Int
    offset: Int
    orderBy: [_PersonOrdering]
    filter: _PersonFilter
  ): [Person]
  Chapter(
    chapterID: ID
    shortName: String
    name: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_ChapterOrdering]
    filter: _ChapterFilter
  ): [Chapter]
  Skill(
    skillID: ID
    expertise: String
    description: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_SkillOrdering]
    filter: _SkillFilter
  ): [Skill]
  Badge(
    badgeID: ID
    name: String
    version: String
    description: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_BadgeOrdering]
    filter: _BadgeFilter
  ): [Badge]
  Tag(
    tagID: ID
    label: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_TagOrdering]
    filter: _TagFilter
  ): [Tag]
}

type Skill {
  skillID: ID!
  expertise: String!
  description: String
  people(
    first: Int
    offset: Int
    orderBy: [_PersonOrdering]
    filter: _PersonFilter
  ): [Person]
  _id: String
}

type Squad {
  squadID: ID!
  name: String!
  mission: String
  focus(filter: _FocusFilter): Focus
  tpl(filter: _SquadSquadTPLFilter): _SquadTpl
  po(filter: _SquadSquadPOFilter): _SquadPo
  members(filter: _SquadSquadMembersFilter): [_SquadMembers]
  badges(
    first: Int
    offset: Int
    orderBy: [_BadgeOrdering]
    filter: _BadgeFilter
  ): [Badge]
  tags(
    first: Int
    offset: Int
    orderBy: [_TagOrdering]
    filter: _TagFilter
  ): [Tag]
  _id: String
}

type SquadMembers {
  from: Person
  to: Squad
  roles: [String]
  allocation: Float!
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
}

type SquadPO {
  from: Person
  to: Squad
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
}

type SquadTPL {
  from: Person
  to: Squad
  active: Boolean
  startDate: _Neo4jDateTime
  endDate: _Neo4jDateTime
}

type Tag {
  tagID: ID!
  label: String!
  squads(
    first: Int
    offset: Int
    orderBy: [_SquadOrdering]
    filter: _SquadFilter
  ): [Squad]
  _id: String
}

