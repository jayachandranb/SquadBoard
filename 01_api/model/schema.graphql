# Types and Enums Start

type Squad {
    squadID: ID!
    name: String!
    mission: String
    focus: Focus @relation(name:"FOCUSSED_ON", direction:OUT)
    tpl: SquadTPL
    po: SquadPO
    health: Float
    members: [SquadMembers]
    badges: [Badge] @relation(name:"ACHIEVED", direction:OUT)
    tags: [Tag] @relation(name:"TAGGED_AS", direction:OUT)
    locations: [Location] @cypher(statement:"MATCH (this)<-[:MEMBER_OF]-(:Person)-[:BASED_IN]->(l:Location) RETURN DISTINCT l")
    stories: [Story] @relation(name:"WORKING_ON", direction:OUT)
}

type Focus {
    focusID:ID!
    area: String!
    description: String
    squads:[Squad] @relation(name:"FOCUSSED_ON", direction:IN)
}

type Person {
    personID: ID!
    lanID: String!
    firstName: String
    middleName: String
    lastName: String!
    email: String!
    phone: String
    location: Location @relation(name:"BASED_IN", direction:OUT)
    chapter: Chapter @relation(name:"PART_OF", direction:OUT)
    isChapterLead: Boolean
    skills:[Skill] @relation(name:"SKILLED_AT", direction:OUT)
    tplOf:[SquadTPL]
    memberOf: [SquadMembers]
    productOwnerOf: [SquadPO]
    totalAllocation: Float @cypher(statement:"MATCH (this)-[m:MEMBER_OF]->(:Squad) RETURN SUM(m.allocation)")
    badges:[Badge] @relation(name:"WAS_AWARDED", direction:OUT)
    organisation: Organisation @relation(name:"EMPLOYEE_OF", direction:OUT)
    commits: [Commit] @relation(name:"PERFORMED", direction:OUT)
}

type Chapter {
    chapterID: ID!
    shortName: String!
    name: String!
    members: [Person] @relation(name:"PART_OF", direction:IN)
}

type Skill {
    skillID: ID!
    expertise: String!
    description: String
    people: [Person] @relation(name:"SKILLED_AT", direction:IN)
}

type Badge {
    badgeID: ID!
    name: String!
    version: String
    description: String
    squads: [Squad] @relation(name:"ACHIEVED", direction:IN)
    people: [Person] @relation(name:"WAS_AWARDED", direction:IN)
}

type Tag {
    tagID: ID!
    label: String!
    squads: [Squad] @relation(name:"TAGGED_AS", direction:IN)
}

type Location {
    city: String!
    country: String!
    people: [Person] @relation(name:"BASED_IN", direction:IN)
    squads: [Squad] @cypher(statement:"MATCH (s:Squad)<-[:MEMBER_OF]-(:Person)-[:BASED_IN]->(this) RETURN DISTINCT s")
}

type Organisation {
    organisationID: ID!
    shortName: String!
    name: String!
    employees: [Person] @relation(name:"EMPLOYEE_OF", direction:IN)
}

# Jira

type ProgramIncrement {
    piID: ID!
    piNumber: String!
    isCurrent: Boolean!
    startDate: Date!
    endDate: Date
    numberOfSprints: Int
    epics: [Epic] @relation(name:"SCHEDULED_FOR", direction:IN)
}

type Feature {
    featureID: ID!
    jiraID: String!
    status: Status!
    epics: [Epic] @relation(name:"TOWARDS", direction:IN)
}

type Epic {
    epicID: ID!
    jiraID: String!
    status: Status!
    programIncrement: ProgramIncrement @relation(name:"SCHEDULED_FOR", direction:OUT)
    feature: Feature @relation(name:"TOWARDS", direction:OUT)
    stories: [Story] @relation(name:"FULFILLS", direction:IN)
}

type Story {
    storyID: ID!
    jiraID: String!
    status: Status!
    epic: Epic @relation(name:"FULFILLS", direction:OUT)
    squad: Squad @relation(name:"WORKING_ON", direction:IN)
}

enum Status {
    INPROGRESS
    COMPLETED
    BACKLOG
    OTHER
}

# git

type Repository {
    repoID: ID!
    repoTool: RepoTool!
    sdcpID: String!
    repoURL: String!
    branches: [Branch] @relation(name:"BRANCH_OF", direction:IN)
}

enum RepoTool {
    GITHUB
    BITBUCKET
}

type Branch {
    branchID: ID!
    sdcpBranchID: String!
    branchType: BranchType!
    repository: Repository! @relation(name:"BRANCH_OF", direction:OUT)
    commits: [Commit] @relation(name:"COMMIT_TO", direction:IN)
}

enum BranchType {
    MASTER
    DEVELOP
    RELEASE
    FEATURE
    HOTFIX
    BUGFIX
    OTHER
}

type Commit {
    commitID: ID!
    sdcpCommitID: String!
    commitTime: DateTime!
    author: Person! @relation(name:"PERFORMED", direction:IN)
    branch: Branch! @relation(name:"COMMIT_TO", direction:OUT)
}

type PullRequest {
    prID: ID!
    scdpPRID: String!
    author: Person @relation(name:"REQUESTED", direction:IN)
    fromBranch: Branch @relation(name:"CHANGES_FROM", direction: OUT)
    toBranch: Branch @relation(name:"MERGE_TO", direction:OUT)
    repo: Repository @cypher(statement:"MATCH (r:Repository)<-[:BRANCH_OF]-(:Branch)<-[:CHANGES_FROM]-(this) RETURN DISTINCT r")
}

# Types and Enums End

# Relationships Start

type SquadTPL @relation(name:"TPL_OF") {
    from: Person
    to: Squad
    active: Boolean
    startDate: Date
    endDate: Date
}

type SquadPO @relation(name:"PO_OF") {
    from: Person
    to: Squad
    active: Boolean
    startDate: Date
    endDate: Date
}

type SquadMembers @relation(name:"MEMBER_OF") {
    from: Person
    to: Squad
    roles: [String]
    allocation: Float!
    active: Boolean
    startDate: Date
    endDate: Date
}

# Relationships End